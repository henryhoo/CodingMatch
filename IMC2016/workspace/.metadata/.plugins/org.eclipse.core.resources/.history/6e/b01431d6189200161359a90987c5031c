import java.util.HashMap;
import java.util.HashSet;

public class Solution {
	public static void main(String[] args) {
		int[][] A = {{5,4,4},{4,3,4},{3,2,4},{2,2,2},{3,3,4},{1,4,4},{4,1,1}};
		System.out.println(solution(A));
	}
	
	static int[][] v, a;
    public static int solution(int[][] A) {
        // write your code in Java SE 8
    	if (A.length == 0) return 0;
    	int res = 0;
    	v = new int[A.length][A[0].length];
    	a = A;
    	for (int i=0; i < A.length; i++) {
    		for (int j=0; j < A[0].length; j++) {
    			if (helper(i,j, A.length, A[0].length)==0) res++;
    		}
    	}
    	return res;
    }
    private static int helper(int i, int j, int M, int N){
    	if (i >= M || i<0 || j>=N || j<0) {
    		return 1;
    	}
    	else if (v[i][j] == 1) {
    		return 1;
    	} else {
    		if (i < M - 1 && a[i][j] == a[i+1][j]) {
    			v[i][j] = 1;
    			helper(i+1,j, M, N);
    		}
    		if (j < N - 1 && a[i][j] == a[i][j+1]) {
    			v[i][j] = 1;
    			helper(i,j+1, M, N);
    		}
    		if (i > 0 && a[i][j] == a[i-1][j]) {
    			v[i][j] = 1;
    			helper(i-1,j, M, N);
    		}
    		if (j > 0 && a[i][j] == a[i][j-1]) {
    			v[i][j] = 1;
    			helper(i,j-1, M, N);
    		}	
    		return 0;
    	}
    }
	public static int solution(int[] A, int[] B, int M, int X, int Y) {
        // write your code in Java SE 8
		HashSet<Integer> set = new HashSet<>();
		int curWeight = 0;
		int curNumber = 0;
		int temp = 0;
		int result = 0;
		for (int i = 0; i < A.length; i++) {
			if (curWeight + A[i] > Y || curNumber == X ) {
				result += (temp+1);
				result++;
				curWeight = 0;
				curNumber = 0;
				temp = 0;
				set.clear();
			}
			curWeight += A[i];
			curNumber += 1;
			if(!set.contains(B[i])) {
				set.add(B[i]);
				temp += 1;
				}
			}
		result += temp;
		result++;
		return result;
    }
}
